{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/hongloc/Documents/GitHub/Covid_pass/screens/User/Verification/VerificationCard.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component, useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport firebase from \"../../../database/firebase\";\n\nfunction VerificationCard(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== 'web')) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage(uri) {\n    var result, response, blob, ref;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n            console.log(result);\n\n            if (result.cancelled) {\n              _context2.next = 14;\n              break;\n            }\n\n            setImage(result.uri);\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 8:\n            response = _context2.sent;\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 11:\n            blob = _context2.sent;\n            ref = firebase.storage().ref().child(\"my-image\");\n            return _context2.abrupt(\"return\", ref.put(blob));\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }\n  }), React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Next for verification\",\n    onPress: function onPress() {\n      return navigation.navigate('Card');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default VerificationCard;","map":{"version":3,"sources":["/Users/hongloc/Documents/GitHub/Covid_pass/screens/User/Verification/VerificationCard.js"],"names":["React","Component","useState","useEffect","ImagePicker","NavigationContainer","createStackNavigator","firebase","VerificationCard","navigation","image","setImage","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","uri","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","console","log","cancelled","fetch","response","blob","ref","storage","child","put","flex","alignItems","justifyContent","width","height","navigate"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Button, Platform, Image} from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport firebase from '../../../database/firebase';\n\nfunction VerificationCard({ navigation }) {\n    const [image, setImage] = useState(null);\n\n    useEffect(() => {\n        (async () => {\n          if (Platform.OS !== 'web') {\n            const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n            if (status !== 'granted') {\n              alert('Sorry, we need camera roll permissions to make this work!');\n            }\n          }\n        })();\n      }, []);\n    \n      const pickImage = async (uri) => {\n        let result = await ImagePicker.launchImageLibraryAsync({\n          mediaTypes: ImagePicker.MediaTypeOptions.All,\n          allowsEditing: true,\n          aspect: [4, 3],\n          quality: 1,\n        });\n    \n        console.log(result);\n\n        \n    \n        if (!result.cancelled) {\n          setImage(result.uri);\n          const response = await fetch(uri);\n          const blob = await response.blob();\n          var ref = firebase.storage().ref().child(\"my-image\");\n          return ref.put(blob);\n        }\n      };\n\n\n    return (\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n            {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n            <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n            <Button title=\"Next for verification\" onPress={() => navigation.navigate('Card')} />\n        </View>\n    );\n}\n\nexport default VerificationCard;"]},"metadata":{},"sourceType":"module"}